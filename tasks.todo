TASKS:
    User module:
      ✔ user.gql @done (26/11/2023, 23:24:32)
      ✔ UserSchema @done (24/11/2023, 05:38:28)
      ✔ User interface @done (24/11/2023, 05:38:26)
      ☐ user-settings.gql
      ☐ UserSettingsSchema
      ☐ UserSettings interface

    ☐ Create modules/users UserSchema
    ☐ Add Mongoose to basic Apollo server and test wiring
    ☐ Test basic Apollo server without database
    ✔ Quickly check env.config.`ts style for BP and then copy values from tsk-api @done (23/11/2023, 19:09:42)
    ✔ Create User interface type and extensions @done (23/11/2023, 18:28:21)
    ✔ Create database.config.ts with Mongoose.connect and event handlers. @done (23/11/2023, 00:37:37)


    ---

    When you receive data from different OAuth providers, you can write a normalization layer that converts the data into a consistent format used by your application.
For example, you could map picture from Google and Facebook and profile_image_url from Twitter to a single field in your schema, such as profilePicture.
This normalization process would take place in the part of your code where you handle the OAuth responses.

function normalizeUserData(provider, userData) {
  const normalizedUser = {
    // common fields
    userId: userData.id || userData.id_str,
    username: userData.name,
    email: userData.email,
    // provider-specific fields
    profilePicture: userData.picture || userData.profile_image_url,
    // ... other fields
  };
  return normalizedUser;
}

Google:

    id: A unique identifier for the user.
    email: The user's email address.
    name: The user's full name.
    given_name: The user's given (first) name.
    family_name: The user's family (last) name.
    picture: URL of the user's profile picture.
    locale: The user's locale (e.g., en).
    Facebook:

    id: A unique identifier for the user.
    name: The user's full name.
    first_name: The user's first name.
    last_name: The user's last name.
    email: The user's email address.
    picture: The user's profile picture.
    gender: The user's gender.
    locale: The user's locale.
    Twitter:

    id_str: A string representing the user's unique ID.
    name: The user's name as they've defined it.
    screen_name: The user's Twitter handle.
    location: The user-reported location.
    description: The user's profile description.
    url: URL provided by the user in their profile.
    profile_image_url: URL of the user's profile image.